# GENERATED USING CHAT GPT

import random
import folium

from app import Config
from flask import Flask
from app.dao import dao
from app.services.tracking_services import map_point_to_route, init

app = Flask(__name__)
app.config.from_object(Config)
app.app_context().push()

dao.init()
init()

# Original bus route data
bus_route = [
  (-90.50664,14.608653),
  (-90.50666,14.60864),
  (-90.50666,14.60864),
  (-90.506714,14.608606),
  (-90.5068,14.608553),
  (-90.50693,14.608455),
  (-90.50693,14.608454),
  (-90.50694,14.608448),
  (-90.50694,14.608448),
  (-90.50704,14.608388),
  (-90.50711,14.60836),
  (-90.50717,14.60834),
  (-90.50725,14.608327),
  (-90.50745,14.608308),
  (-90.50761,14.608285),
  (-90.50775,14.608266),
  (-90.50783,14.608261),
  (-90.50789,14.608259),
  (-90.50795,14.608268),
  (-90.507965,14.60827),
  (-90.50802,14.60828),
  (-90.508064,14.608294),
  (-90.508064,14.608294),
  (-90.50829,14.608422),
  (-90.50829,14.608422),
  (-90.50829,14.608422),
  (-90.50834,14.60849),
  (-90.508415,14.60859),
  (-90.508415,14.60859),
  (-90.508446,14.608624),
  (-90.50857,14.608744),
  (-90.508644,14.608827),
  (-90.50891,14.609093),
  (-90.50892,14.609102),
  (-90.50892,14.609102),
  (-90.508934,14.609142),
  (-90.508934,14.609148),
  (-90.50894,14.609189),
  (-90.50895,14.609264),
  (-90.50895,14.609335),
  (-90.508934,14.609413),
  (-90.50891,14.609573),
  (-90.50889,14.609787),
  (-90.50889,14.609797),
  (-90.50886,14.610067),
  (-90.50884,14.610196),
  (-90.50882,14.610405),
  (-90.50881,14.610424),
  (-90.50881,14.610424),
  (-90.50914,14.610466),
  (-90.510315,14.610586),
  (-90.510345,14.610588),
  (-90.510345,14.610588),
  (-90.510345,14.610261),
  (-90.510345,14.610261),
  (-90.51033,14.609428),
  (-90.51033,14.609426),
  (-90.51033,14.609426),
  (-90.51036,14.607646),
  (-90.51037,14.607553),
  (-90.51037,14.607427),
  (-90.51037,14.607427),
  (-90.510376,14.60721),
  (-90.510376,14.60721),
  (-90.510376,14.606847),
  (-90.510376,14.606847),
  (-90.510376,14.606804),
  (-90.510376,14.606804),
  (-90.510376,14.60666),
  (-90.510376,14.60666),
  (-90.51038,14.606465),
  (-90.51038,14.606465),
  (-90.51039,14.605927),
  (-90.51039,14.605881),
  (-90.51039,14.605881),
  (-90.51039,14.605776),
  (-90.51039,14.605776),
  (-90.510414,14.605463),
  (-90.51042,14.605218),
  (-90.51042,14.605218),
  (-90.510445,14.604809),
  (-90.510445,14.604809),
  (-90.51047,14.604349),
  (-90.510475,14.604194),
  (-90.510475,14.604194),
  (-90.510506,14.603705),
  (-90.510506,14.603705),
  (-90.51052,14.60356),
  (-90.51052,14.60356),
  (-90.510544,14.603404),
  (-90.51057,14.603306),
  (-90.51057,14.603306),
  (-90.51058,14.603294),
  (-90.51062,14.603273),
  (-90.51064,14.603265),
  (-90.51066,14.603262),
  (-90.51068,14.60326),
  (-90.51069,14.60326),
  (-90.51076,14.603266),
  (-90.511086,14.603315),
  (-90.51135,14.603362),
  (-90.5114,14.603371),
  (-90.5114,14.603371),
  (-90.511444,14.603365),
  (-90.511505,14.60335),
  (-90.51155,14.603333),
  (-90.511566,14.603326),
  (-90.511566,14.603326),
  (-90.51192,14.603375),
  (-90.51192,14.603375),
  (-90.512215,14.603417),
  (-90.512215,14.603417),
  (-90.512276,14.603428),
  (-90.512276,14.603428),
  (-90.512856,14.603493),
  (-90.512924,14.6035),
  (-90.512924,14.6035),
  (-90.51304,14.603512),
  (-90.51304,14.603512),
  (-90.51364,14.603571),
  (-90.51364,14.603571),
  (-90.51384,14.603581),
  (-90.51384,14.603581),
  (-90.51395,14.603601),
  (-90.51395,14.603601),
  (-90.51395,14.603601),
  (-90.513824,14.604571),
  (-90.513824,14.604571),
  (-90.513824,14.604595),
  (-90.513695,14.60546),
  (-90.51369,14.60548),
  (-90.51369,14.60548),
  (-90.51365,14.60557),
  (-90.51365,14.60557),
  (-90.51344,14.60596),
  (-90.51342,14.605985),
  (-90.51342,14.605989),
  (-90.513405,14.606005),
  (-90.51338,14.606019),
  (-90.51338,14.606019),
  (-90.51327,14.606066),
  (-90.513245,14.606078),
  (-90.51324,14.606091),
  (-90.51322,14.606108),
  (-90.513214,14.606124),
  (-90.51321,14.606143),
  (-90.5132,14.606175),
  (-90.51319,14.606265),
  (-90.51319,14.606265),
  (-90.51313,14.606639),
  (-90.51313,14.606639),
  (-90.51306,14.607124),
  (-90.51306,14.607124),
  (-90.51295,14.607884),
  (-90.51295,14.607884),
  (-90.512924,14.607882),
  (-90.51166,14.607674),
  (-90.51166,14.607674),
  (-90.511635,14.60767),
  (-90.51037,14.607427),
  (-90.51037,14.607427),
  (-90.510345,14.607423),
  (-90.509766,14.607335),
  (-90.509766,14.607335),
  (-90.50922,14.607251),
  (-90.50922,14.607251),
  (-90.5089,14.607191),
  (-90.5086,14.607156),
  (-90.5086,14.607156),
  (-90.5086,14.607268),
  (-90.508545,14.607607),
  (-90.508545,14.607807),
  (-90.50854,14.607846),
  (-90.50854,14.607859),
  (-90.50852,14.6078825),
  (-90.508484,14.607946),
  (-90.50841,14.608029),
  (-90.50826,14.608166),
  (-90.50821,14.608232),
  (-90.5082,14.608238),
  (-90.5082,14.608238),
  (-90.5081,14.608281),
  (-90.508064,14.608294),
  (-90.508064,14.608294),
  (-90.50802,14.60828),
  (-90.507965,14.60827),
  (-90.50792,14.608264),
  (-90.50789,14.608259),
  (-90.50783,14.608261),
  (-90.50775,14.608266),
  (-90.50745,14.608308),
  (-90.50725,14.608327),
  (-90.50717,14.60834),
  (-90.507164,14.608342),
  (-90.50711,14.60836),
  (-90.50704,14.608388),
  (-90.50694,14.608448),
  (-90.50694,14.608448),
  (-90.50693,14.608455),
  (-90.5068,14.608553),
  (-90.506714,14.608606),
  (-90.50666,14.60864),
  (-90.50666,14.60864),
  (-90.50662,14.608634),
]

# Set noise level (degrees). Adjust if more or less noise is needed.
noise_level = 0.001

# Generate noisy data points and map them to the route
noisy_points = [
  (lat + random.uniform(-noise_level, noise_level), lng + random.uniform(-noise_level, noise_level))
  for lng, lat in bus_route
]

mapped_points = [map_point_to_route(lat, lng, 3) for lat, lng in noisy_points]

# Create a Folium map centered on the route
m = folium.Map(location=[14.611966, -90.51031], zoom_start=15)

# Add the original route to the map
for coord in bus_route:
  folium.CircleMarker(
      location=[coord[1], coord[0]],  # Note lat/lng ordering
      radius=3,
      color='gray',
      fill=True,
      fill_color='blue'
  ).add_to(m)

# Add noisy points to the map
for coord in noisy_points:
  folium.CircleMarker(
      location=[coord[0], coord[1]],
      radius=3,
      color='red',
      fill=True,
      fill_color='red'
  ).add_to(m)

# Add mapped points to the map
for coord in mapped_points:
  if coord:
    folium.CircleMarker(
        location=[coord.y, coord.x],
        radius=3,
        color='green',
        fill=True,
        fill_color='green'
    ).add_to(m)

# Save the map as an HTML file
m.save("mapped_route_test.html")
